{
  "name": "Grorchestrator",
  "tagline": "Groovy orchestrator for Docker designed for you to just chill",
  "body": "#Introduction\r\nGrorchestrator is an docker orchestration tool designed using Groovy.It abstracts away interaction with a Docker Daemon to a json configuration file and a few commands.it is designed to be used in CD pipelines.\r\n\r\n#Motivation\r\nDocker is an engineering marvel.It helps you to think about you infrastructure and topology from wheels-up.\r\nIt definitely helps systems to achieve the fabled mantle of the `12 Factor App`.\r\n\r\nBut to make use of it in a production grade application,we have a plethora of options:Unwieldy shell scripts,proprietary orchestration systems all of which are a bit clunky when it comes to a slick CI/CD process the way you want,and adhering to common sense practices like Abstraction,Security,Separation of Concerns,Versioning of Infrastructure(yes!) and etc.\r\n\r\nBut there is a silver lining.Docker provides a [Remote api](https://docs.docker.com/engine/reference/api/docker_remote_api/) that can be leveraged for orchestration.It is awesome.!.Please read up on it before taking this for a spin.  \r\n\r\nGrorchestrator provides a simple abstraction for this API and exposes its capabilities via a shell script that can be easily used in CD processes without having to worry about bulky shell scripts.\r\n\r\n#Installation.  \r\n* Build the distro.(you need JDK 8 installed)\r\n   *   Clone the code.  \r\n   *   Run the command `./gradlew clean build`.  \r\n   *   This will yield a `gror.zip` in the `build/distributions/` directory.  \r\n   *   `gror.zip` is the bundle you will normally have to download if you don't have to build from source.  \r\n* Extract the archive.  \r\n* Set the `$GROR_HOME` env variable to the place where you have extracted the archive.  \r\n* Adjust the `$PATH` to include this: `export PATH=$PATH:$GROR_HOME/bin`  \r\n\r\n\r\n#Usage.(Needs JRE 8)  \r\n1.Create a `gror.json` file where you want to store the environment configurations.The contents should be as described in the documentation.  \r\n2.To pull a image exec `gror pull <your_instance_name> <tag>`.  \r\n3.To run a container exec `gror run <your_instance_name> <tag>`.  \r\n4.To kill a container exec `gror kill <your_instance_name>`.  \r\n\r\n\r\n#Knobs  \r\nSet the following environment variables in your gror server shell.  \r\n`registry_username`  : username for the registry.Maps to `DockerHubAuth.username`.  \r\n`registry_email`: email for the registry.Maps to `DockerHubAuth.email`.  \r\n`registry_password` : password for the registry.Maps to `DockerHubAuth.password`.  \r\n`registry_auth` : auth for the registry.Maps to `DockerHubAuth.auth`.Let it default to `\"\"`.   \r\n\r\n#Current features:  \r\n1.Port mappings from host to container.  \r\n2.Volume mappings from host to container.   \r\n3.Adding extra hosts to the container.  \r\n4.Pulling an image from docker hub.  \r\n5.Running a container.  \r\n6.Killing a container.  \r\n7.SSL Support.  \r\n8.V1.19 to V1.24 of Docker Remote API supported\r\n\r\n#Structure of Gror.json  \r\n1.Gror.json is the file that the gror installation reads to be able to orchestrate your environment.  \r\n2.You would need to structure the file appropriately and source control it.  \r\n3.Its structure is as follows.please refer to the `gror.json.example` as a reference\r\n\r\n```\r\n      systemInfo  \r\n         name :   Name of the system.\r\n\r\n      components  \r\n         instance \r\n             name : Name of the instance.(Eg redis-server-1)    \r\n \r\n             portMapping: Map of ports to be exposed .\r\n\r\n             volumeMapping: Map of volumes to be attached.\r\n\r\n             imageName: The image name to run e.g. (redis)  \r\n\r\n             host  \r\n                 alias: a common name for easy reference  \r\n                 ip: Ip of the host  \r\n                 dockerPort: Port of the docker remote api  \r\n                 protocol :  http or https  \r\n                 dockerVersion : Docker version \r\n                 apiVersion : Docker API version  \r\n \r\n             tag : The tag of image to run  \r\n\r\n             hostsMapping : Addition of extra hosts to the container.  \r\n\r\n             envMap : Map of environment vars to be set in the container.  \r\n\r\n             links :  Map of links to other containers  \r\n\r\n          name : Name of the micro service.(Eg - Cache-Service)    \r\n\r\n```           \r\n\r\n   \r\n  \r\n   \r\n ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}